"""change id to uuid and make some indexes

Revision ID: 7fa58b06bc13
Revises: 641a36c353b1
Create Date: 2025-07-01 20:04:37.399976

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "7fa58b06bc13"
down_revision: Union[str, Sequence[str], None] = "641a36c353b1"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    
    # 1. –í–∫–ª—é—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ uuid-ossp –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp"')
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
    connection = op.get_bind()
    result = connection.execute(sa.text("SELECT COUNT(*) FROM users"))
    user_count = result.scalar()
    
    if user_count > 0:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ - –¥–µ–ª–∞–µ–º —Å–ª–æ–∂–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é
        upgrade_with_data()
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - –ø—Ä–æ—Å—Ç–∞—è –º–∏–≥—Ä–∞—Ü–∏—è
        upgrade_empty_table()


def upgrade_with_data() -> None:
    """Upgrade –∫–æ–≥–¥–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ."""
    
    print("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ users, –≤—ã–ø–æ–ª–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é...")
    
    # 1. –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É —Å UUID
    op.add_column('users', sa.Column('id_new', postgresql.UUID(), nullable=True))
    
    # 2. –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–º–∏ UUID –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
    op.execute("UPDATE users SET id_new = uuid_generate_v4()")
    
    # 3. –î–µ–ª–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É NOT NULL
    op.alter_column('users', 'id_new', nullable=False)
    
    # 4. –£–¥–∞–ª—è–µ–º constraints –æ—Ç —Å—Ç–∞—Ä–æ–π –∫–æ–ª–æ–Ω–∫–∏
    op.drop_constraint('users_pkey', 'users', type_='primary')
    
    # 5. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é integer –∫–æ–ª–æ–Ω–∫—É
    op.drop_column('users', 'id')
    
    # 6. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É –≤ id
    op.execute('ALTER TABLE users RENAME COLUMN id_new TO id')
    
    # 7. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π primary key —Å UUID
    op.create_primary_key('users_pkey', 'users', ['id'])
    
    # 8. –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∏ –∏–Ω–¥–µ–∫—Å—ã
    apply_other_changes()


def upgrade_empty_table() -> None:
    """Upgrade –∫–æ–≥–¥–∞ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è."""
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users –ø—É—Å—Ç–∞—è, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç—É—é –º–∏–≥—Ä–∞—Ü–∏—é...")
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
    op.execute("COMMIT")
    
    try:
        # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –∏ constraints –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
        op.execute("DROP INDEX IF EXISTS ix_users_email")
        op.execute("DROP INDEX IF EXISTS ix_users_username")
        
        # –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        op.execute("DROP TABLE IF EXISTS users CASCADE")
        
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        op.execute("BEGIN")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–Ω–æ–≤–æ —Å UUID
        op.create_table(
            'users',
            sa.Column('id', postgresql.UUID(), nullable=False, server_default=sa.text('uuid_generate_v4()')),
            sa.Column('email', sa.String(length=254), nullable=False),
            sa.Column('username', sa.String(length=30), nullable=False),
            sa.Column('password_hash', sa.String(length=255), nullable=False),
            sa.Column('status', postgresql.ENUM(
                'ACTIVE', 'INACTIVE', 'SUSPENDED', 'PENDING_VERIFICATION',
                name='userstatus', create_type=False), nullable=False),
            sa.Column('role', postgresql.ENUM(
                'USER', 'MODERATOR', 'ADMIN', 
                name='userrole', create_type=False), nullable=False),
            sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
            sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
            sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True),
            sa.Column('email_verified_at', sa.DateTime(timezone=True), nullable=True),
            sa.Column('first_name', sa.String(length=50), nullable=True),
            sa.Column('last_name', sa.String(length=50), nullable=True),
            sa.Column('avatar_url', sa.String(length=500), nullable=True),
            sa.Column('bio', sa.String(length=500), nullable=True),
            sa.Column('login_count', sa.Integer(), nullable=False, server_default='0'),
            sa.Column('is_newsletter_subscribed', sa.Boolean(), nullable=False, server_default='true'),
            sa.PrimaryKeyConstraint('id')
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        op.create_index('ix_users_email', 'users', ['email'], unique=True)
        op.create_index('ix_users_username', 'users', ['username'], unique=True)
        op.create_index('ix_users_email_status', 'users', ['email', 'status'])
        op.create_index('ix_users_created_at', 'users', ['created_at'])
        
    except Exception as e:
        op.execute("ROLLBACK")
        raise e


def apply_other_changes() -> None:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–µ."""
    
    with op.batch_alter_table("users", schema=None) as batch_op:
        # –ò–∑–º–µ–Ω—è–µ–º –¥–ª–∏–Ω—É –ø–æ–ª–µ–π
        batch_op.alter_column(
            "email",
            existing_type=sa.VARCHAR(length=255),
            type_=sa.String(length=254),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "username",
            existing_type=sa.VARCHAR(length=50),
            type_=sa.String(length=30),
            existing_nullable=False,
        )
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        try:
            batch_op.drop_index("ix_users_email")
        except:
            pass
        
        try:
            batch_op.drop_index("ix_users_username")
        except:
            pass
            
        try:
            batch_op.drop_index("ix_users_email_status")
        except:
            pass
            
        try:
            batch_op.drop_index("ix_users_created_at")
        except:
            pass
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ constraints –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        try:
            batch_op.drop_constraint("users_email_key", type_="unique")
        except:
            pass
        
        try:
            batch_op.drop_constraint("users_username_key", type_="unique")
        except:
            pass
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã
        batch_op.create_index('ix_users_email', ["email"], unique=True)
        batch_op.create_index('ix_users_username', ["username"], unique=True)
        batch_op.create_index('ix_users_email_status', ['email', 'status'])
        batch_op.create_index('ix_users_created_at', ['created_at'])


def downgrade() -> None:
    """Downgrade schema."""
    
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: Downgrade –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ—Ç–µ—Ä–µ UUID –¥–∞–Ω–Ω—ã—Ö!")
    print("UUID –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω—ã–µ INTEGER ID")
    
    # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –ø–µ—Ä–µ–¥ —Ä–∞–±–æ—Ç–æ–π —Å —Ç–∞–±–ª–∏—Ü–µ–π
    try:
        op.drop_index('ix_users_email', 'users')
        op.drop_index('ix_users_username', 'users')
        op.drop_index('ix_users_email_status', 'users')
        op.drop_index('ix_users_created_at', 'users')
    except:
        pass
    
    # 1. –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å INTEGER ID
    op.execute('''
        CREATE TABLE users_temp (
            id SERIAL PRIMARY KEY,
            email VARCHAR(254) NOT NULL,
            username VARCHAR(30) NOT NULL,
            password_hash VARCHAR(255) NOT NULL,
            status userstatus NOT NULL,
            role userrole NOT NULL,
            created_at TIMESTAMP WITH TIME ZONE NOT NULL,
            updated_at TIMESTAMP WITH TIME ZONE NOT NULL,
            last_login_at TIMESTAMP WITH TIME ZONE,
            email_verified_at TIMESTAMP WITH TIME ZONE,
            first_name VARCHAR(50),
            last_name VARCHAR(50),
            avatar_url VARCHAR(500),
            bio VARCHAR(500),
            login_count INTEGER NOT NULL DEFAULT 0,
            is_newsletter_subscribed BOOLEAN NOT NULL DEFAULT true
        )
    ''')
    
    # 2. –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ (UUID –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã, ID —Å—Ç–∞–Ω—É—Ç –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω—ã–º–∏)
    op.execute('''
        INSERT INTO users_temp (
            email, username, password_hash, status, role,
            created_at, updated_at, last_login_at, email_verified_at,
            first_name, last_name, avatar_url, bio,
            login_count, is_newsletter_subscribed
        )
        SELECT 
            email, username, password_hash, status, role,
            created_at, updated_at, last_login_at, email_verified_at,
            first_name, last_name, avatar_url, bio,
            login_count, is_newsletter_subscribed
        FROM users
        ORDER BY created_at  -- –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ ID
    ''')
    
    # 3. –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å UUID
    op.drop_table('users')
    
    # 4. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    op.execute('ALTER TABLE users_temp RENAME TO users')
    
    # 5. –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—ã–µ constraints –∏ –∏–Ω–¥–µ–∫—Å—ã
    op.create_index('ix_users_email', 'users', ['email'], unique=True)
    op.create_index('ix_users_username', 'users', ['username'], unique=True)